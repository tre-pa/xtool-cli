#set ($OB = "${")
#set ($CB = "}")
#set ($DS = "$")
#!/bin/bash
#####################################
# Author: SDS/COSIS/TRE-PA
# Version: v0.0.1
# Date: 19/03/2019
# Description: Registra a aplicação Spring Boot no Keycloak.
# Usage: ./register.sh 
#####################################


KC_HOME=${DS}HOME/opt/keycloak-4.8.3.Final
KC_SERVER=http://localhost:8085
KC_REALM=TRE-PA
KC_ADMIN_USER=admin
KC_ADMIN_PASS=admin
KC_CLIENT_ID=${projectName}
KC_CLIENT_SECRET=${clientSecret} #Mesmo client_secret do application.properties
KC_REALM_ROLES=()
KC_CLIENT_ROLES=("USER" "REPORT_MANAGER")
##
__NORMAL__="\e[0m\e[39m"
__YELLOW__="\e[93m"
__RED__="\e[91m"
__BLUE__="\e[1m\e[96m"
__GREEN__="\e[92m"
__BG_BLUE__="\e[1m\e[44m"

check_jq() {
	#echo "Buscando pelo utilitário 'jq'..."
	if [ -z ${DS}(which jq) ]; then
		echo 
		echo "Utilitário 'jq' (https://stedolan.github.io/jq/) não encontrado."
		echo "======================================================================================================"
		echo " Instale o 'jq' com seu gerenciador de pacotes. No fedora: "
		echo " 	${DS} sudo dnf install jq "
		echo " ${__RED__}Execute o script novamente após a instalação.${__NORMAl__}"
		echo "======================================================================================================"
		echo ""
		exit 0
	fi
}
# Inicia o keycloak caso esteja parado.
#start() {
#	
#}

change_dir() {
	if [ ! -d "${DS}KC_HOME/bin" ]; then
		echo ""
		echo "Não foi encontrada nenhuma instalação válida do keycloak em '${DS}KC_HOME' "
		exit 1
	fi
	cd ${DS}KC_HOME/bin
}

# Realiza a autenticação no keycloak para a execução dos comandos.
authenticate() {
	echo -e "* ${DS}{__BLUE__}Iniciando autenticação no keycloak com usuário '${DS}KC_ADMIN_USER'.${DS}{__NORMAL__}"
	./kcadm.sh config credentials --server ${DS}{KC_SERVER}/auth --realm master --user ${DS}{KC_ADMIN_USER} --client admin-cli --password ${DS}{KC_ADMIN_PASS} > /dev/null 2>&1
	if [ "${DS}?" == 0 ]; then
		echo -e " - ${DS}{__GREEN__}Autenticação realizada com sucesso.${DS}{__NORMAL__}"
	else
		echo -e " - ${DS}{__RED__}Erro ao autenticar no keycloak.${DS}{__NORMAL__}"
		exit 1
	fi
}

##
# Verifica a existência do realm ${DS}KC_REALM.
#
check_realm() {
	echo ""
	echo -e "* ${DS}{__BLUE__}Verificando a existência do realm '${DS}KC_REALM'...${DS}{__NORMAL__}"
	local v=${DS}(./kcadm.sh get realms | jq '.[] | select(.id == '\""${DS}KC_REALM\""') | has("id")') 
	if [ "${DS}{v}" == "true" ]; then
		echo -e " - ${DS}{__GREEN__}Realm '${DS}KC_REALM' encontrado.${DS}{__NORMAL__}"
		return 0
	fi		
	echo -e " - ${DS}{__YELLOW__}Realm '${DS}KC_REALM' não encontrado. Proceda com criação do realm e execute o script novamente.${DS}{__NORMAL__}"
	exit 1
}

# Verifica a existência do client e cria caso não exista.
create_client() {
	echo ""
	echo -e "* ${DS}{__BLUE__}Verificando a existência do client '${DS}KC_CLIENT_ID'...${DS}{__NORMAL__}"
	local v=${DS}(./kcadm.sh get clients -r ${DS}KC_REALM --fields clientId | jq '.[] | select(.clientId == "'${DS}KC_CLIENT_ID'") | has("clientId")')
	if [ "${DS}{v}" == "true" ]; then
		echo -e " - ${DS}{__GREEN__}Client '${DS}KC_CLIENT_ID' encontrado.${DS}{__NORMAL__}"
		return 0
	fi		
	echo -e " - ${DS}{__YELLOW__}Client '${DS}KC_CLIENT_ID' não encontrado. Iniciando criação...${DS}{__NORMAL__}\r"
	
	./kcadm.sh create clients -r ${DS}KC_REALM \
		-s clientId=${DS}KC_CLIENT_ID \
		-s enabled=true \
		-s secret=${DS}KC_CLIENT_SECRET \
		-s publicClient=false \
		-s 'redirectUris=["http://localhost:8080/'${DS}KC_CLIENT_ID'/*"]' \
		-s 'webOrigins=["*"]' \
		-s directAccessGrantsEnabled=true \
		-s serviceAccountsEnabled=true \
		-s authorizationServicesEnabled=true > /dev/null 2>&1
		
	if [ "${DS}?" == 0 ]; then
		echo -e " - ${DS}{__GREEN__}Client '${DS}KC_CLIENT_ID' criado com sucesso.${DS}{__NORMAL__}"
	else
		echo -e " - ${DS}{__RED__} Erro ao criar client '$KC_CLIENT_ID'.${DS}{__NORMAL__}"
		exit 1
	fi
		
}

#
## Verifica a existência das realm roles e cria em caso de inexistência.
create_realm_roles() {
	echo ""
	for role in "${DS}{KC_REALM_ROLES[@]}"; do
		echo -e "* ${DS}{__BLUE__}Verificando existência da realm role '${DS}role'.${DS}{__NORMAL__}..."
		local v=${DS}(./kcadm.sh get-roles -r ${DS}KC_REALM | jq '.[] | select(.name == "'${DS}role'") | has("name")')
		if [ "${DS}{v}" != "true" ]; then
			echo -e " - ${DS}{__YELLOW__}Realm role '${DS}role' não encontrada. Iniciando criação...${DS}{__NORMAL__}"
			./kcadm.sh create roles -r ${DS}KC_REALM -s name=${DS}role
		else
			echo -e " - ${DS}{__GREEN__}Realm role '${DS}role' encontrada.${DS}{__NORMAL__}"
		fi
	done
}

#Vericia a existência dos client roles e cria em caso de inexistência.
create_client_roles() {
	echo ""
	local id=${DS}(./kcadm.sh get clients -r ${DS}KC_REALM --fields id,clientId | jq -r '.[] | select(.clientId == "'${DS}KC_CLIENT_ID'") | .id')
	for role in "${DS}{KC_CLIENT_ROLES[@]}"; do
		echo -e "* ${DS}{__BLUE__}Verificando existência da client role '${DS}role'${DS}{__NORMAL__}..."
		local v=${DS}(./kcadm.sh get-roles -r ${DS}KC_REALM --cclientid ${DS}KC_CLIENT_ID | jq '.[] | select(.name == "'${DS}role'") | has("name")')
		if [ "${DS}{v}" != "true" ]; then
			echo -e " - ${DS}{__YELLOW__}Client role '${DS}role' não encontrada. Iniciando criação...${DS}{__NORMAL__}"
			./kcadm.sh create clients/${DS}id/roles -r ${DS}KC_REALM -s name=${DS}role > /dev/null 2>&1
			if [ "${DS}?" == 0 ]; then
				echo -e " - ${DS}{__GREEN__}Client role '${DS}role' criada com sucesso.${DS}{__NORMAL__}"
			else
				echo -e " - ${DS}{__RED__} Erro ao criar client role '${DS}role'.${DS}{__NORMAL__}"
				exit 1
			fi 
		else
			echo -e " - ${DS}{__GREEN__}Client role '${DS}role' encontrada.${DS}{__NORMAL__}" 
		fi
	done
}

import_authz_alert() {
	echo ""
	echo -e "${__BLINK__}${__RED__} IMPORTANTE: ${__NORMAL__} Leia as instruções no README.adoc do projeto com os procedimentos de importação das configuração de autorização. "
}

echo -e "${DS}{__BLUE__}Iniciando o registro da aplicação Spring Boot ${DS}{__NORMAL__}${DS}{__BG_BLUE__}${DS}KC_CLIENT_ID${DS}{__NORMAL__}${DS}{__BLUE__} no Keycloak...${DS}{__NORMAL__}\n"
check_jq
change_dir
authenticate
check_realm
create_client
create_realm_roles
create_client_roles
echo -e "${__BLUE__}Registro parcial da aplicação '$KC_CLIENT_ID' realizado com sucesso!${__NORMAL__}"
import_authz_alert
