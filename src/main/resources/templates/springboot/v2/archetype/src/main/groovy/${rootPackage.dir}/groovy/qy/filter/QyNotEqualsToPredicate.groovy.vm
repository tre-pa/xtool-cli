package ${rootPackage.name}.groovy.qy.filter;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

class QyNotEqualsToPredicate extends QyPredicate {

	@Override
	String toSql() {
		if (isBoolean()) return this.dataField + " = " + ((boolean) this.value ? 0 : 1);
		if (getValue().equals("@null")) return this.getDataField() + " is not null ";
		if (getValue().equals("@notnull")) return this.getDataField() + " is null ";
		this.getDataField() + " <> " + this.surroundSingleQuotes(this.getValue());
	}

	@Override
	String toJpql() {
		if (isBoolean()) return this.getDataField() + " is " + !(boolean) this.getValue();
		if (getValue().equals("@null")) return this.getDataField() + " is not null ";
		if (getValue().equals("@notnull")) return this.getDataField() + " is null ";
		this.getDataField() + " <> " + this.surroundSingleQuotes(this.getValue());
	}

	@Override
	<T> Predicate toPredicate(Class<T> clazz, Root<T> root, CriteriaQuery<?> cq, CriteriaBuilder cb) {
		Class<?> dataFieldType = getDataType(clazz, this.getDataField());
		if (dataFieldType == Boolean.class && (boolean) this.getValue() == true) return cb.isFalse(root.get(this.getDataField()));
		if (dataFieldType == Boolean.class && (boolean) this.getValue() == false) return cb.isTrue(root.get(this.getDataField()));
		if (getValue() as String == "@notnull") return cb.isNull(root.get(this.getDataField()));
		if (getValue() as String == "@null") return cb.isNotNull(root.get(this.getDataField()));
		if (dataFieldType.isEnum()) return cb.notEqual(root.get(this.dataField), Enum.valueOf(dataFieldType, this.value))
		cb.notEqual(root.get(this.getDataField()), this.getValue());
	}

}
