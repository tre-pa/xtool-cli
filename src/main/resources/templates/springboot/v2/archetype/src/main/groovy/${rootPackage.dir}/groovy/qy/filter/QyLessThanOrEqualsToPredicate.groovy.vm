package ${rootPackage.name}.groovy.qy.filter;

import java.time.LocalDate;
import java.time.LocalDateTime;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

class QyLessThanOrEqualsToPredicate extends QyPredicate {

	@Override
	String toSql() {
		this.dataField + " <= " + this.surroundSingleQuotes(this.value);
	}

	@Override
	String toJpql() {
		this.dataField + " <= " + this.surroundSingleQuotes(this.value);
	}

	@Override
	<T> Predicate toPredicate(Class<T> clazz, Root<T> root, CriteriaQuery<?> cq, CriteriaBuilder cb) {
		Class<?> dataFieldType = getDataType(clazz, this.dataField);
		if (dataFieldType == LocalDate.class) return cb.lessThanOrEqualTo(root.get(this.dataField), LocalDate.parse(this.value as String));
		if (dataFieldType == LocalDateTime.class) return cb.lessThanOrEqualTo(root.get(this.dataField), LocalDateTime.parse(this.value as String));
		if (dataFieldType == Long.class) return cb.le(root.get(this.dataField), (Number) this.value);
		if (dataFieldType == Integer.class) return cb.le(root.get(this.dataField), (Number) this.value);
		if (dataFieldType == Short.class) return cb.le(root.get(this.dataField), (Number) this.value);
		if (dataFieldType == BigDecimal.class) return cb.le(root.get(this.dataField), new BigDecimal(String.valueOf(this.value)));
		throw new IllegalArgumentException(String.format("Não foi possível montar um predicado para o campo '%s' com o tipo '>'", this.dataField));
	}

}
