package ${rootPackage.name}.groovy.qy;

import java.util.stream.Collectors

import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root

import ${rootPackage.name}.groovy.qy.filter.QyExpression

/**
 * Classe de filtragem. Paramatro do m√©todo rest de filtragem.
 * 
 * @author jcruz
 *
 */
abstract class QyFilterable extends QyExpression {
	List<? extends QyExpression> predicates = []

	@Override
	String toSql() {
		predicates.stream()
				.map { it.toSql() }
				.collect(Collectors.joining());
	}

	@Override
	String toJpql() {
		predicates.stream()
				.map{ it.toJpql }
				.collect(Collectors.joining());
	}
	
	class EmptyQyFilterable extends QyFilterable {

		@Override
		public <T> Predicate toPredicate(Class<T> clazz, Root<T> root, CriteriaQuery<?> cq, CriteriaBuilder cb) {
			return null;
		}
		
	}
	
}
