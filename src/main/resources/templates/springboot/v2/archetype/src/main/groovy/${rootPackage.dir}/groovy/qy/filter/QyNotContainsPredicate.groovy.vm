package ${rootPackage.name}.groovy.qy.filter;
import ${rootPackage.name}.groovy.qy.QyAttributePath

import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Path
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root


class QyNotContainsPredicate extends QyPredicate {

	@Override
	String toSql() {
		this.dataField + " not like '%" + this.value + "%'"
	}

	@Override
	String toJpql() {
		this.dataField + " not like '%" + this.value + "%'"
	}

	@Override
	<T> Predicate toPredicate(Class<T> clazz, Root<T> root, CriteriaQuery<?> cq, CriteriaBuilder cb, Map paths) {
		QyAttributePath qyAttr = paths.get(this.dataField)
		Class<?> dataFieldType = qyAttr ? qyAttr.fieldType : getDataType(clazz, this.dataField)
		Path path = qyAttr ? qyAttr.map.apply(root): root.get(this.dataField)

		if (dataFieldType == String.class) return cb.notLike(cb.upper(path), "%" + ((String) this.value).toUpperCase() + "%")
		throw new IllegalArgumentException(String.format("Não foi possível montar um predicado para o campo '%s' com o tipo 'notcontains'", this.dataField))
	}
}
