package ${rootPackage.name}.groovy.jii


import java.util.function.Function

import javax.annotation.PostConstruct
import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Path
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root

import org.springframework.data.jpa.domain.Specification


/**
 * Classe jii de Specification
 *
 */
class JiiSpecification<T> {

	Map<String, JiiAttributePath> paths = [:]

	@PostConstruct
	private void init() {
		this.configure()
	}

	/**
	 * Specification variável com os predicados definidos pelo usuário via JiiFilterable
	 * 
	 * @param entityClass Entidade alvo da Specification
	 * @param filterable Classe JiiFilterable com os predicados definidos pelo usuário.
	 * @return Specification
	 */
	public Specification<T> variableSpecification(Class<T> entityClass, JiiFilterable filterable) {
		return new Specification() {
					@Override
					public Predicate toPredicate(Root root, CriteriaQuery query, CriteriaBuilder criteriaBuilder) {
						return filterable.toPredicate(entityClass, root, query, criteriaBuilder, paths)
					}
				}
	}

	/**
	 * Specification fixas. 
	 * @return
	 */
	public Specification<T> fixedSpecification() {
		return new Specification() {
					@Override
					public Predicate toPredicate(Root root, CriteriaQuery query, CriteriaBuilder criteriaBuilder) {
						return null
					}
				}
	}

	protected void configure() {
	}

	protected void map(String path, Class<?> fieldType, Function<Root<?>, Path> map) {
		paths.put(path, new JiiAttributePath(fieldType: fieldType, map: map))
	}
}
