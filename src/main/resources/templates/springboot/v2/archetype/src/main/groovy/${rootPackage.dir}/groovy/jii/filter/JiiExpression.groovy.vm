package ${rootPackage.name}.groovy.jii.filter;

import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root

import com.fasterxml.jackson.annotation.JsonSubTypes
import com.fasterxml.jackson.annotation.JsonTypeInfo
import com.fasterxml.jackson.annotation.JsonSubTypes.Type

/**
 * Classe base dos predicados de comparação e operadores lógicos (AND,OR).
 * 
 * @author jcruz
 *
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
// @formatter:off
@JsonSubTypes([
	@Type(value=JiiConjunction.class, name="and"),
	@Type(value=JiiDisjunction.class, name="or"),
	@Type(value=JiiEqualsPredicate.class, name="="),
	@Type(value=JiiNotEqualsToPredicate.class, name="<>"),
	@Type(value=JiiGreaterThanPredicate.class, name=">"),
	@Type(value=JiiGreaterThanOrEqualsToPredicate.class, name=">="),
	@Type(value=JiiLessThanPredicate.class, name="<"),
	@Type(value=JiiLessThanOrEqualsToPredicate.class, name="<="),
	@Type(value=JiiContainsPredicate.class, name="contains"),
	@Type(value=JiiNotContainsPredicate.class, name="notcontains")
])
// @formatter:on
abstract class JiiExpression {
	String type

	abstract String toSql()

	abstract String toJpql()

	abstract <T> Predicate toPredicate(Class<T> clazz, Root<T> root, CriteriaQuery<?> cq, CriteriaBuilder cb, Map attrTable)

}

