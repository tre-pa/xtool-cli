package ${rootPackage.name}.groovy.jii.filter;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;

import org.apache.commons.lang3.reflect.FieldUtils;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

/**
 * Classe base dos prodicados com operadores de comparação.
 * 
 * @author jcruz
 *
 */
@Getter
@Setter
@ToString
abstract class JiiPredicate extends JiiExpression {
	String dataField;
	Object value;

	protected Object surroundSingleQuotes(Object value) {
		if (value instanceof String || value instanceof Date || value instanceof LocalDate || value instanceof LocalDateTime) {
			return "'" + value + "'";
		}
		return value;
	}

	protected <T> Class<?> getDataType(Class<T> clazz, String dataField) {
		Field field = FieldUtils.getDeclaredField(clazz, dataField, true);
		return field.type;
	}

	protected boolean isDate() {
		return value instanceof Date || value instanceof LocalDate || value instanceof LocalDateTime || value instanceof java.sql.Date || value instanceof Timestamp;
	}

	protected boolean isNumber() {
		value instanceof Integer || value instanceof Long || value instanceof Short || value instanceof BigDecimal || value instanceof Double;
	}

	protected boolean isString() {
		return value instanceof String;
	}

	protected boolean isBoolean() {
		return value instanceof Boolean;
	}
}
