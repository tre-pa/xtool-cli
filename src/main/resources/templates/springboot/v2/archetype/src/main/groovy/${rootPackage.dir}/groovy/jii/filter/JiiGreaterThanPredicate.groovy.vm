package ${rootPackage.name}.groovy.jii.filter;
import ${rootPackage.name}.groovy.jii.JiiAttributePath

import java.time.LocalDate
import java.time.LocalDateTime

import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Path
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root


class JiiGreaterThanPredicate extends JiiPredicate {

	@Override
	String toSql() {
		this.dataField + " > " + this.surroundSingleQuotes(this.value)
	}

	@Override
	String toJpql() {
		this.dataField + " > " + this.surroundSingleQuotes(this.value)
	}

	@Override
	<T> Predicate toPredicate(Class<T> clazz, Root<T> root, CriteriaQuery<?> cq, CriteriaBuilder cb, Map paths) {
		JiiAttributePath jiiAttr = paths.get(this.dataField)
		Class<?> dataFieldType = jiiAttr ? jiiAttr.fieldType : getDataType(clazz, this.dataField)
		Path path = jiiAttr ? jiiAttr.map.apply(root): root.get(this.dataField)

		if (dataFieldType == LocalDate.class) return cb.greaterThan(path, LocalDate.parse((String) this.value))
		if (dataFieldType == LocalDateTime.class) return cb.greaterThan(path, LocalDateTime.parse((String) this.value))
		if (dataFieldType == Long.class) return cb.gt(path, (Number) this.value)
		if (dataFieldType == Integer.class) return cb.gt(path, (Number) this.value)
		if (dataFieldType == Short.class) return cb.gt(path, (Number) this.value)
		if (dataFieldType == BigDecimal.class) return cb.gt(path, new BigDecimal(String.valueOf(this.value)))
		throw new IllegalArgumentException(String.format("Não foi possível montar um predicado para o campo '%s' com o tipo '>'", this.dataField))
	}
}
