#set ($OB = "${")
#set ($CB = "}")
package ${rootPackage.name}.groovy.qy.filter;

import javax.persistence.criteria.CriteriaBuilder
import javax.persistence.criteria.CriteriaQuery
import javax.persistence.criteria.Path
import javax.persistence.criteria.Predicate
import javax.persistence.criteria.Root

import ${rootPackage.name}.groovy.qy.QyAttributePath

/**
 * Classe que representa uma condição de igualdade.
 * 
 * @author jcruz
 *
 */
class QyEqualsPredicate extends QyPredicate {

	@Override
	String toSql() {
		if (isBoolean()) return this.dataField + " = " + ((boolean) this.value ? 1 : 0)
		if (getValue().equals("@null")) return "${this.dataField} is null "
		if (getValue().equals("@notnull")) return "${this.dataField} is not null "
		this.dataField + " = " + this.surroundSingleQuotes(this.value)
	}

	@Override
	String toJpql() {
		if (isBoolean()) return this.dataField + " is " + (boolean) this.getValue()
		if (getValue().equals("@null")) return "${this.dataField} is null "
		if (getValue().equals("@notnull")) return "${this.dataField} is not null "
		this.dataField + " = " + this.surroundSingleQuotes(this.getValue())
	}

	@Override
	<T> Predicate toPredicate(Class<T> clazz, Root<T> root, CriteriaQuery<?> cq, CriteriaBuilder cb, Map paths) {
		QyAttributePath qyAttr = paths.get(this.dataField)
		Class<?> dataFieldType = qyAttr ? qyAttr.fieldType : getDataType(clazz, this.dataField)
		Path path = qyAttr ? qyAttr.map.apply(root): root.get(this.dataField)

		if (dataFieldType == Boolean.class && (boolean) this.value == true) return cb.isTrue(path)
		if (dataFieldType == Boolean.class && (boolean) this.value == false) return cb.isFalse(path)
		if (this.value as String == "@notnull") return cb.isNotNull(path)
		if (this.value as String == "@null") return cb.isNull(path)
		if (dataFieldType.isEnum()) return cb.equal(path, Enum.valueOf(dataFieldType, this.value))
		cb.equal(path, this.value)
	}
}
