package ${rootPackage.name}.groovy.report.service;

import java.time.LocalDateTime
import java.util.stream.Collectors

import org.apache.commons.lang3.StringUtils
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page
import org.springframework.data.domain.Pageable
import org.springframework.data.domain.Sort
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.support.rowset.SqlRowSet;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper

import ar.com.fdvs.dj.core.DynamicJasperHelper
import ar.com.fdvs.dj.core.layout.ClassicLayoutManager
import ar.com.fdvs.dj.domain.DynamicReport
import ${rootPackage.name}.groovy.jii.JiiAggregation
import ${rootPackage.name}.groovy.jii.JiiFilterable
import ${rootPackage.name}.groovy.jii.JiiPage
import ${rootPackage.name}.groovy.jii.JiiPayload
import ${rootPackage.name}.groovy.jii.sql.JiiSqlContext
import ${rootPackage.name}.groovy.report.JReportStyles
import ${rootPackage.name}.groovy.report.domain.JReport
import ${rootPackage.name}.groovy.report.repository.JReportRepository
import ${rootPackage.name}.groovy.report.types.JReportColumn
import ${rootPackage.name}.groovy.report.types.JReportGrid
import groovy.json.JsonSlurper
import net.sf.jasperreports.engine.JRDataSource
import net.sf.jasperreports.engine.JasperExportManager
import net.sf.jasperreports.engine.JasperPrint
import net.sf.jasperreports.engine.data.ListOfArrayDataSource

@Service
class JReportService {

	@Autowired
	JdbcTemplate jdbcTemplate;

	@Autowired
	JReportRepository jreportRepository;

	@Autowired
	private JiiSqlContext jiiContext;

	/**
	 * Salva um novo report.
	 * 
	 * @param jreport
	 * @return
	 */
	JReport insert(JReport jreport) {
		jreport.createdAt = LocalDateTime.now();
		jreport.uuid = UUID.randomUUID();
		if (jreport.grid == null) jreport.grid = this.genDefaultGridTemplate(jreport.sql);
		if (StringUtils.isEmpty(jreport.gpdf)) jreport.gpdf = this.genDefaultGPDFTemplate();
		if (StringUtils.isEmpty(jreport.gexcel)) jreport.gexcel = "excel";
		return this.jreportRepository.save(jreport);
	}

	/**
	 * Atualiza um report.
	 * 
	 * @param jreport
	 * @return
	 */
	JReport update(JReport jreport) {
		jreport.lastUpdateAt = LocalDateTime.now();
		return this.jreportRepository.save(jreport);
	}

	/**
	 * Executa a consulta SQL.
	 * 
	 * @param id
	 * @return
	 */
	JiiPage<Map<String, Object>> executeSQLPageable(String sql, Pageable pageable, JiiPayload payload) {
		Page<Map<String, Object>> page = jiiContext.selectFrom(sql)
				.where(payload?.filterable)
				.orderBy(pageable.sort)
				.limit(pageable)
				.fetchMaps()
		List<JiiAggregation> aggregations = this.executeSQLAgg(sql, payload);
		jiiContext.clear();
		new JiiPage(pagination: page, aggregations: aggregations);
	}

	/**
	 * Executa a consulta SQL de aggregação.
	 *
	 * @param id
	 * @return
	 */
	List<JiiAggregation> executeSQLAgg(String sql, JiiPayload payload) {
		jiiContext.aggregation(sql, payload);
	}

	private List<Map<String, Object>> executeSQL(String sql, Sort sort, JiiFilterable filter) {
		List<Map<String, Object>> list = [];
		if (filter) {
			list = jiiContext.selectFrom(sql)
					.where(filter)
					.orderBy(sort)
					.fetchMaps()
			jiiContext.clear();
			return list;
		}
		list = jiiContext.selectFrom(sql)
				.orderBy(sort)
				.fetchMaps()
		jiiContext.clear();
		return list;
	}

	/**
	 * Executa o código groovy para a geração do relatório em PDF.
	 * 
	 * @param id Id do Relatório.
	 * 
	 */
	ByteArrayInputStream genGPDF(JReport jreport,Sort sort, JiiFilterable filter) {
		Binding binding = new Binding();
		binding.setProperty("report", new JsonSlurper().parseText(new ObjectMapper().writeValueAsString(jreport)));
		binding.setProperty("jdbcTemplate", jdbcTemplate);
		binding.setProperty("JReportStyles", JReportStyles.class);
		GroovyShell groovyShell = new GroovyShell(binding);
		List<Map<String, Object>> sqlResult = executeSQL(jreport.sql, sort, filter);
		List<Object[]> records = sqlResult.stream().map { row ->
			row.values().toArray()
		}.collect(Collectors.toList());
		List<String> columnNames = jreport.getGrid().getColumns().stream().map { it.dataField }.collect(Collectors.toList());

		DynamicReport dynamicReport = (DynamicReport) groovyShell.evaluate(jreport.gpdf);
		JRDataSource ds = new ListOfArrayDataSource(records, columnNames as String[]);
		JasperPrint jp = DynamicJasperHelper.generateJasperPrint(dynamicReport, new ClassicLayoutManager(), ds);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		JasperExportManager.exportReportToPdfStream(jp, baos);
		ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
	}

	/**
	 * Gera o template da coluna baseado em uma consuta SQL.
	 * 
	 * @param sql
	 * @return
	 */
	List<JReportColumn> genDefaultColumnsTemplate(String sql) {
		SqlRowSet sqlRowSet = jdbcTemplate.queryForRowSet(sql);
		List<JReportColumn> columns = new ArrayList<>();
		String[] columnNames = sqlRowSet.getMetaData().getColumnNames();
		for (int i = 0; i < columnNames.length; i++) {
			JReportColumn column = new JReportColumn();
			column.dataField = columnNames[i];
			column.caption = columnNames[i];
			column.dataType = JReportColumn.toTypescriptType(sqlRowSet.getMetaData().getColumnType(i + 1))
			column.javaType = JReportColumn.toJavaType(sqlRowSet.getMetaData().getColumnType(i + 1)).getName();
			columns.add(column);
		}
		columns;
	}

	JReportGrid genDefaultGridTemplate(String sql) {
		JReportGrid grid = new JReportGrid();
		grid.columns = this.genDefaultColumnsTemplate(sql);
		grid.properties = [
			"wordWrapEnabled": true,
			"showBorders": true,
			"showRowLines": true,
			"showColumnLines": false,
			"sorting": [
				"mode": "multiple"
			],
			"paging": [
				"pageSize": 5
			],
			"pager": [
				"allowedPageSizes": [5, 10, 20],
				"showNavigationButtons": true,
				"showPageSizeSelector": true,
				"showInfo": true
			],
			"filterRow": [
				"visible": true
			],
			"headerFilter": [
				"visible": true
			],
			"searchPanel": [
				"visible": true,
				"width": 300
			]
		]
		grid;
	}


	/**
	 * Gera o template do gpdf baseado nas colunas JReportColumn.
	 * 
	 * @param columns
	 * @return
	 */
	String genDefaultGPDFTemplate() {
		String gpdfTemplate = '''
        import org.springframework.core.io.ClassPathResource
        import ar.com.fdvs.dj.domain.ImageBanner;
        import ar.com.fdvs.dj.domain.builders.ColumnBuilder
        import ar.com.fdvs.dj.domain.builders.DynamicReportBuilder
		
        def drb = new DynamicReportBuilder()
		
        drb.title = report.title
        drb.subtitle = report.subtitle
        drb.useFullPageWidth = true
		drb.addFirstPageImageBanner(new ClassPathResource("BOOT-INF/brasao-republica.png").getPath(), new Integer(50), new Integer(50), ImageBanner.ALIGN_CENTER);
		drb.setDefaultStyles(JReportStyles.titleStyle, JReportStyles.subtitleStyle, JReportStyles.columnHeaderStyle, JReportStyles.columnDetailStyle)
		
        def columns = [:]
		
        report.grid.columns.each { 
            columns[it.dataField] = ColumnBuilder.new
                .setColumnProperty(it.dataField, it.javaType)
                .setTitle(it.caption)
                .setWidth(it.width)
                .build()
            drb.addColumn(columns[it.dataField])
        }
		
        def dr = drb.build()
		'''.stripIndent();
	}
}