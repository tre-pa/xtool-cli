#set ($DS = "$")
#!/bin/bash
#####################################
# Author: SDS/COSIS/TRE-PA
# Version: v0.0.1
# Date: 19/03/2019
# Description: Registra a aplicação Angular no Keycloak.
# Usage: ./register.sh 
#####################################


KC_HOME=${DS}HOME/opt/keycloak-4.8.3.Final
KC_SERVER=http://localhost:8085
KC_REALM=TRE-PA
KC_ADMIN_USER=admin
KC_ADMIN_PASS=admin
KC_CLIENT_ID=${projectName}
KC_CLIENT_REDIRECT_URIS="http://localhost:4200/*" #Adicionar outras uris na string separando por vírgula.
KC_REALM_ROLES=("DEVELOPER")
KC_CLIENT_ROLES=("USER")
##
__NORMAL__="\e[0m\e[39m"
__YELLOW__="\e[93m"
__RED__="\e[91m"
__BLUE__="\e[1m\e[96m"
__GREEN__="\e[92m"
__BG_BLUE__="\e[1m\e[44m"

check_jq() {
	#echo "Buscando pelo utilitário 'jq'..."
	if [ -z ${DS}(which jq) ]; then
		echo 
		echo "Utilitário 'jq' não encontrado."
		echo "======================================================================================================"
		echo " Instale o 'jq' com seu gerenciador de pacotes. No fedora: "
		echo " 	${DS} sudo dnf install jq "
		echo " ${__RED__}Execute o script novamente após a instalação.${__NORMAl__}"
		echo "======================================================================================================"
		echo ""
		exit 0
	fi
}
# Inicia o keycloak caso esteja parado.
#start() {
#	
#}

change_dir() {
	if [ ! -d "${DS}KC_HOME/bin" ]; then
		echo ""
		echo "Não foi encontrada nenhuma instalação válida do keycloak em '${DS}KC_HOME' "
		exit 1
	fi
	cd ${DS}KC_HOME/bin
}

# Realiza a autenticação no keycloak para a execução dos comandos.
authenticate() {
	echo -e "* ${DS}{__BLUE__}Iniciando autenticação no keycloak com usuário '${DS}KC_ADMIN_USER'.${DS}{__NORMAL__}"
	./kcadm.sh config credentials \
		--server ${DS}{KC_SERVER}/auth \
		--realm master \
		--user ${DS}{KC_ADMIN_USER} \
		--client admin-cli \
		--password ${DS}{KC_ADMIN_PASS} > /dev/null 2>&1
	if [ "${DS}?" == 0 ]; then
		echo -e " - ${DS}{__GREEN__}Autenticação realizada com sucesso.${DS}{__NORMAL__}"
	else
		echo -e " - ${DS}{__RED__}Erro ao autenticar no keycloak.${DS}{__NORMAL__}"
		exit 1
	fi
}

# Verifica se o client backend está registrada no keycloak.
# Em caso negativo o script é interrompido.
check_backend_client() {
	echo -e "* ${DS}{__BLUE__}Verificando a existência do registro do client (backend) '${DS}{KC_CLIENT_ID}-service'...${DS}{__NORMAL__}"
	# Lista todos os clients do realm '${DS}KC_REALM' e retorna 'true' se o client '${DS}{KC_CLIENT_ID}-service' estiver presente.
	local v=${DS}(./kcadm.sh get clients \
		-r ${DS}KC_REALM \
		--fields clientId | \
		jq -r '.[] | select(.clientId == "'${DS}{KC_CLIENT_ID}-service'") | has("clientId")')
	if [ "${DS}{v}" != "true" ]; then
		echo -e " - ${DS}{__RED__}Não foi encontrado o registro da aplicação spring boot '${DS}{KC_CLIENT_ID}-service' (backend) no keycloak.${DS}{__NORMAL__}"
		echo -e " - ${DS}{__RED__}Proceda com o registro e execute o script novamente.${DS}{__NORMAL__}"
		exit 1
	else
		echo -e " - ${DS}{__GREEN__}Client '${DS}{KC_CLIENT_ID}-service' encontrado.${DS}{__NORMAL__}" 
	fi
}

##
# Verifica a existência do realm ${DS}KC_REALM.
#
check_realm() {
	echo ""
	echo -e "* ${DS}{__BLUE__}Verificando a existência do realm '${DS}KC_REALM'...${DS}{__NORMAL__}"
	local v=${DS}(./kcadm.sh get realms | jq '.[] | select(.id == "'${DS}KC_REALM'") | has("id")') 
	if [ "${DS}{v}" == "true" ]; then
		echo -e " - ${DS}{__GREEN__}Realm '${DS}KC_REALM' encontrado.${DS}{__NORMAL__}"
		return 0
	fi		
	echo -e " - ${DS}{__YELLOW__}Realm '${DS}KC_REALM' não encontrado. Proceda com criação do realm e execute o script novamente.${DS}{__NORMAL__}"
	exit 1
}

##
# Verifica a existência do client e cria caso não exista.
#
create_client() {
	echo ""
	echo -e "* ${DS}{__BLUE__}Verificando a existência do client '${DS}KC_CLIENT_ID'...${DS}{__NORMAL__}"
	local v=${DS}(./kcadm.sh get clients -r ${DS}KC_REALM --fields clientId | jq '.[] | select(.clientId == "'${DS}KC_CLIENT_ID'") | has("clientId")')
	if [ "${DS}{v}" == "true" ]; then
		echo -e " - ${DS}{__GREEN__}Client '${DS}KC_CLIENT_ID' encontrado.${DS}{__NORMAL__}"
		return 0
	fi		
	echo -e " - ${DS}{__YELLOW__}Client '${DS}KC_CLIENT_ID' não encontrado. Iniciando criação...${DS}{__NORMAL__}"
	./kcadm.sh create clients -r ${DS}KC_REALM \
		-s clientId=${DS}KC_CLIENT_ID \
		-s enabled=true \
		-s publicClient=true \
		-s fullScopeAllowed=false \
		-s 'redirectUris=["'${DS}KC_CLIENT_REDIRECT_URIS'"]' \
		-s 'webOrigins=["*"]' > /dev/null 2>&1
		
	if [ "${DS}?" == 0 ]; then
		echo -e " - ${DS}{__GREEN__}Client '${DS}KC_CLIENT_ID' criado com sucesso.${DS}{__NORMAL__}"
	else
		echo -e " - ${DS}{__RED__}Erro ao criar client '${DS}KC_CLIENT_ID'.${DS}{__NORMAL__}"
		exit 1
	fi
		
}
##
# Verifica a existência da associação das realm roles com o client e cria a associação em caso de inexistência.
#
associate_realm_roles() {
	local id=${DS}(./kcadm.sh get clients -r ${DS}KC_REALM --fields id,clientId | jq -r '.[] | select(.clientId == "'${DS}KC_CLIENT_ID'") | .id')
	for role in "${DS}{KC_REALM_ROLES[@]}"; do
		echo -e "* ${DS}{__BLUE__}Verificando existência da associação do realm role '${DS}role' ao client.${DS}{__NORMAL__}"
		local v=${DS}(./kcadm.sh get clients/${DS}id/scope-mappings/realm -r ${DS}KC_REALM | jq '.[] | select(.name == "'${DS}role'") | has("name")')
		if [ "${DS}{v}" != "true" ]; then
			local roleId=${DS}(./kcadm.sh get clients/${DS}id/scope-mappings/realm/available -r ${DS}KC_REALM | jq -r '.[] | select(.name == "'${DS}role'") | .id')
			echo -e " - ${DS}{__YELLOW__}Realm Role '${DS}role' não associada ao client. Iniciando associação... ${DS}{__NORMAL__}"
			./kcadm.sh create clients/${DS}id/scope-mappings/realm -r ${DS}KC_REALM -b '[ { "id": "'${DS}roleId'" } ]' &&
			echo -e " - ${DS}{__GREEN__}Realm Role '${DS}role' associada ao client com sucesso.${DS}{__NORMAL__}"
		else
			echo -e " - ${DS}{__GREEN__}Realm Role '${DS}role' já associada ao client.${DS}{__NORMAL__}"
		fi
	done
}

##
# Vericia a existência da associação das client roles com o client e cria a associação em caso de inexistência.
#
associate_backend_client_roles() {
	local id=${DS}(./kcadm.sh get clients -r ${DS}KC_REALM --fields id,clientId | jq -r '.[] | select(.clientId == "'${DS}KC_CLIENT_ID'") | .id')
	local b_id=${DS}(./kcadm.sh get clients -r ${DS}KC_REALM --fields id,clientId | jq -r '.[] | select(.clientId == "'${DS}{KC_CLIENT_ID}-service'") | .id')
	for role in "${DS}{KC_CLIENT_ROLES[@]}"; do
		echo -e "* ${DS}{__BLUE__}Verificando existência da associação da client role '${DS}role' (do backend) ao client ${DS}{__NORMAL__}"
		local v=${DS}(./kcadm.sh get clients/${DS}id/scope-mappings/clients/${DS}b_id -r ${DS}KC_REALM | jq '.[] | select(.name == "'${DS}role'") | has("name")')
		if [ "${DS}{v}" != "true" ]; then
			local role_name=${DS}(./kcadm.sh get clients/${DS}id/scope-mappings/clients/${DS}b_id/available -r ${DS}KC_REALM | jq -r '.[] | select(.name == "'${DS}role'") | .name')
			echo -e " - ${DS}{__YELLOW__}Client Role '${DS}role' não associada ao client. Iniciando associação...${DS}{__NORMAL__}"
			./kcadm.sh create clients/${DS}id/scope-mappings/clients/${DS}b_id -r ${DS}KC_REALM -b '[ { "name": "'${DS}role_name'" } ]' &&
			echo -e " - ${DS}{__GREEN__}Client Role '${DS}role' associada ao client com sucesso.${DS}{__NORMAL__}"
		else
			echo -e " - ${DS}{__GREEN__}Client Role '${DS}role' já associada ao client.${DS}{__NORMAL__}"
		fi
	done
}

echo -e "${DS}{__BLUE__}Iniciando o registro da aplicação Angular ${DS}{__NORMAL__}${DS}{__BG_BLUE__}${DS}KC_CLIENT_ID${DS}{__NORMAL__}${DS}{__BLUE__} no Keycloak...${DS}{__NORMAL__}\n"
check_jq
change_dir
authenticate
check_realm
check_backend_client
create_client
associate_realm_roles
associate_backend_client_roles
echo -e "${DS}{__BLUE__}Registro da aplicação '${DS}KC_CLIENT_ID' finalizado com sucesso!${DS}{__NORMAL__}"
