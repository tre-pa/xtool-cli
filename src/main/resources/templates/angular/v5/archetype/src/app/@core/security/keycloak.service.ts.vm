import { Http } from '@angular/http';
import { Observable } from 'rxjs/Rx';
import 'rxjs/add/operator/map'
import 'rxjs/add/observable/fromPromise';
import { Injectable } from "@angular/core";

import { environment } from './../../../environments/environment';
import { CookieService } from 'ngx-cookie-service';

declare var Keycloak: any;

@Injectable()
export class KeycloakService {

    constructor(private cookieService: CookieService) { 
    }

    static auth: any = {};

    /**
     * Método de inicialização da segurança.
     * Inicializa o timer para atualização do token
     */
    static init(): Promise<any> {
        console.log('Keycloak init');
        let keycloak = Keycloak(environment.keycloak_installation);

        KeycloakService.auth.loggedIn = false;

        return new Promise((resolve, reject) => {
            keycloak.init({ onLoad: 'login-required', checkLoginIframe: false })
                .success(() => {
                    KeycloakService.auth.loggedIn = true;
                    KeycloakService.auth.authz = keycloak;
                    KeycloakService.auth.logoutUrl = keycloak.authServerUrl + `/realms/${environment.keycloak_installation.realm}/protocol/openid-connect/logout?redirect_uri=${window.location.origin}${environment.keycloak_redirect_uri}`;

                    // refresh login
                    setInterval(function () {

                      keycloak.updateToken(70).success(function (refreshed) {
                        //Sucesso
                      }).error(function () {
                        console.error('Failed to refresh token');
                      });

                    }, 60000);

                    resolve();
                })
                .error(() => {
                    reject();
                });
        });
    }

    public initConfig(): void{
        //Evento disparado quando token é expirado.
        KeycloakService.auth.authz.onTokenExpired = () => {
            KeycloakService.auth.authz.updateToken()
                .success(() => {  })
                .error(() => {
                    throw new Error('failed to update token on expired');
                });
        };
    }

    /**
     * Método de logout
     */
    logout() {
        KeycloakService.auth.loggedIn = false;
        KeycloakService.auth.authz = null;

        window.location.href = KeycloakService.auth.logoutUrl;
    }

    /**
     * Captura o token
     */
    getToken(): Promise<string> {
        return new Promise<string>((resolve, reject) => {
            if (KeycloakService.auth.authz.token) {
                KeycloakService.auth.authz.updateToken()
                    .success(() => {
                        resolve(<string>KeycloakService.auth.authz.token);
                    })
                    .error(() => {
                        reject('Failed to refresh token');
                    });
            } else {
                reject('Not loggen in');
            }
        });
    }

    /**
     * Retorna as informações do usuário
     */
    getLoadUserInfo(): Promise<any> {
        return new Promise<any>((resolve, reject) => {
            KeycloakService.auth.authz.loadUserInfo().success((userInfo) => {
                resolve(userInfo);
            });

        });
    }

    /**
     * Verifica se o usuário possui a regra informada para o angular
     * @param role 
     */
    static hasResourceRole(role: string): boolean {
        return KeycloakService.auth.authz.hasResourceRole(role, environment.keycloak_installation.clientId);
    }

    public isTokenExpired() {
        return KeycloakService.auth.authz.isTokenExpired();
    }

    public getGroupsInToken(): string[]{
        return KeycloakService.auth.authz.tokenParsed.groups;
    }

}